/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.sk00sha.Pojos;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MatchResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8005971998860705371L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MatchResult\",\"namespace\":\"Result\",\"fields\":[{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"homeTeam\",\"type\":\"string\"},{\"name\":\"awayTeam\",\"type\":\"string\"},{\"name\":\"homeScore\",\"type\":\"int\"},{\"name\":\"awayScore\",\"type\":\"int\"},{\"name\":\"tournament\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"neutral\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MatchResult> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MatchResult> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MatchResult> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MatchResult> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MatchResult> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MatchResult to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MatchResult from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MatchResult instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MatchResult fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence date;
  private java.lang.CharSequence homeTeam;
  private java.lang.CharSequence awayTeam;
  private int homeScore;
  private int awayScore;
  private java.lang.CharSequence tournament;
  private java.lang.CharSequence city;
  private java.lang.CharSequence country;
  private boolean neutral;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MatchResult() {}

  /**
   * All-args constructor.
   * @param date The new value for date
   * @param homeTeam The new value for homeTeam
   * @param awayTeam The new value for awayTeam
   * @param homeScore The new value for homeScore
   * @param awayScore The new value for awayScore
   * @param tournament The new value for tournament
   * @param city The new value for city
   * @param country The new value for country
   * @param neutral The new value for neutral
   */
  public MatchResult(java.lang.CharSequence date, java.lang.CharSequence homeTeam, java.lang.CharSequence awayTeam, java.lang.Integer homeScore, java.lang.Integer awayScore, java.lang.CharSequence tournament, java.lang.CharSequence city, java.lang.CharSequence country, java.lang.Boolean neutral) {
    this.date = date;
    this.homeTeam = homeTeam;
    this.awayTeam = awayTeam;
    this.homeScore = homeScore;
    this.awayScore = awayScore;
    this.tournament = tournament;
    this.city = city;
    this.country = country;
    this.neutral = neutral;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return homeTeam;
    case 2: return awayTeam;
    case 3: return homeScore;
    case 4: return awayScore;
    case 5: return tournament;
    case 6: return city;
    case 7: return country;
    case 8: return neutral;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.CharSequence)value$; break;
    case 1: homeTeam = (java.lang.CharSequence)value$; break;
    case 2: awayTeam = (java.lang.CharSequence)value$; break;
    case 3: homeScore = (java.lang.Integer)value$; break;
    case 4: awayScore = (java.lang.Integer)value$; break;
    case 5: tournament = (java.lang.CharSequence)value$; break;
    case 6: city = (java.lang.CharSequence)value$; break;
    case 7: country = (java.lang.CharSequence)value$; break;
    case 8: neutral = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'homeTeam' field.
   * @return The value of the 'homeTeam' field.
   */
  public java.lang.CharSequence getHomeTeam() {
    return homeTeam;
  }


  /**
   * Sets the value of the 'homeTeam' field.
   * @param value the value to set.
   */
  public void setHomeTeam(java.lang.CharSequence value) {
    this.homeTeam = value;
  }

  /**
   * Gets the value of the 'awayTeam' field.
   * @return The value of the 'awayTeam' field.
   */
  public java.lang.CharSequence getAwayTeam() {
    return awayTeam;
  }


  /**
   * Sets the value of the 'awayTeam' field.
   * @param value the value to set.
   */
  public void setAwayTeam(java.lang.CharSequence value) {
    this.awayTeam = value;
  }

  /**
   * Gets the value of the 'homeScore' field.
   * @return The value of the 'homeScore' field.
   */
  public int getHomeScore() {
    return homeScore;
  }


  /**
   * Sets the value of the 'homeScore' field.
   * @param value the value to set.
   */
  public void setHomeScore(int value) {
    this.homeScore = value;
  }

  /**
   * Gets the value of the 'awayScore' field.
   * @return The value of the 'awayScore' field.
   */
  public int getAwayScore() {
    return awayScore;
  }


  /**
   * Sets the value of the 'awayScore' field.
   * @param value the value to set.
   */
  public void setAwayScore(int value) {
    this.awayScore = value;
  }

  /**
   * Gets the value of the 'tournament' field.
   * @return The value of the 'tournament' field.
   */
  public java.lang.CharSequence getTournament() {
    return tournament;
  }


  /**
   * Sets the value of the 'tournament' field.
   * @param value the value to set.
   */
  public void setTournament(java.lang.CharSequence value) {
    this.tournament = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'neutral' field.
   * @return The value of the 'neutral' field.
   */
  public boolean getNeutral() {
    return neutral;
  }


  /**
   * Sets the value of the 'neutral' field.
   * @param value the value to set.
   */
  public void setNeutral(boolean value) {
    this.neutral = value;
  }

  /**
   * Creates a new MatchResult RecordBuilder.
   * @return A new MatchResult RecordBuilder
   */
  public static MatchResult.Builder newBuilder() {
    return new MatchResult.Builder();
  }

  /**
   * Creates a new MatchResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MatchResult RecordBuilder
   */
  public static MatchResult.Builder newBuilder(MatchResult.Builder other) {
    if (other == null) {
      return new MatchResult.Builder();
    } else {
      return new MatchResult.Builder(other);
    }
  }

  /**
   * Creates a new MatchResult RecordBuilder by copying an existing MatchResult instance.
   * @param other The existing instance to copy.
   * @return A new MatchResult RecordBuilder
   */
  public static MatchResult.Builder newBuilder(MatchResult other) {
    if (other == null) {
      return new MatchResult.Builder();
    } else {
      return new MatchResult.Builder(other);
    }
  }

  /**
   * RecordBuilder for MatchResult instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MatchResult>
    implements org.apache.avro.data.RecordBuilder<MatchResult> {

    private java.lang.CharSequence date;
    private java.lang.CharSequence homeTeam;
    private java.lang.CharSequence awayTeam;
    private int homeScore;
    private int awayScore;
    private java.lang.CharSequence tournament;
    private java.lang.CharSequence city;
    private java.lang.CharSequence country;
    private boolean neutral;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(MatchResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.homeTeam)) {
        this.homeTeam = data().deepCopy(fields()[1].schema(), other.homeTeam);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.awayTeam)) {
        this.awayTeam = data().deepCopy(fields()[2].schema(), other.awayTeam);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.homeScore)) {
        this.homeScore = data().deepCopy(fields()[3].schema(), other.homeScore);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.awayScore)) {
        this.awayScore = data().deepCopy(fields()[4].schema(), other.awayScore);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.tournament)) {
        this.tournament = data().deepCopy(fields()[5].schema(), other.tournament);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.city)) {
        this.city = data().deepCopy(fields()[6].schema(), other.city);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.neutral)) {
        this.neutral = data().deepCopy(fields()[8].schema(), other.neutral);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing MatchResult instance
     * @param other The existing instance to copy.
     */
    private Builder(MatchResult other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.homeTeam)) {
        this.homeTeam = data().deepCopy(fields()[1].schema(), other.homeTeam);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.awayTeam)) {
        this.awayTeam = data().deepCopy(fields()[2].schema(), other.awayTeam);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.homeScore)) {
        this.homeScore = data().deepCopy(fields()[3].schema(), other.homeScore);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.awayScore)) {
        this.awayScore = data().deepCopy(fields()[4].schema(), other.awayScore);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tournament)) {
        this.tournament = data().deepCopy(fields()[5].schema(), other.tournament);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.city)) {
        this.city = data().deepCopy(fields()[6].schema(), other.city);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.country)) {
        this.country = data().deepCopy(fields()[7].schema(), other.country);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.neutral)) {
        this.neutral = data().deepCopy(fields()[8].schema(), other.neutral);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public MatchResult.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public MatchResult.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'homeTeam' field.
      * @return The value.
      */
    public java.lang.CharSequence getHomeTeam() {
      return homeTeam;
    }


    /**
      * Sets the value of the 'homeTeam' field.
      * @param value The value of 'homeTeam'.
      * @return This builder.
      */
    public MatchResult.Builder setHomeTeam(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.homeTeam = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'homeTeam' field has been set.
      * @return True if the 'homeTeam' field has been set, false otherwise.
      */
    public boolean hasHomeTeam() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'homeTeam' field.
      * @return This builder.
      */
    public MatchResult.Builder clearHomeTeam() {
      homeTeam = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'awayTeam' field.
      * @return The value.
      */
    public java.lang.CharSequence getAwayTeam() {
      return awayTeam;
    }


    /**
      * Sets the value of the 'awayTeam' field.
      * @param value The value of 'awayTeam'.
      * @return This builder.
      */
    public MatchResult.Builder setAwayTeam(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.awayTeam = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'awayTeam' field has been set.
      * @return True if the 'awayTeam' field has been set, false otherwise.
      */
    public boolean hasAwayTeam() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'awayTeam' field.
      * @return This builder.
      */
    public MatchResult.Builder clearAwayTeam() {
      awayTeam = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'homeScore' field.
      * @return The value.
      */
    public int getHomeScore() {
      return homeScore;
    }


    /**
      * Sets the value of the 'homeScore' field.
      * @param value The value of 'homeScore'.
      * @return This builder.
      */
    public MatchResult.Builder setHomeScore(int value) {
      validate(fields()[3], value);
      this.homeScore = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'homeScore' field has been set.
      * @return True if the 'homeScore' field has been set, false otherwise.
      */
    public boolean hasHomeScore() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'homeScore' field.
      * @return This builder.
      */
    public MatchResult.Builder clearHomeScore() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'awayScore' field.
      * @return The value.
      */
    public int getAwayScore() {
      return awayScore;
    }


    /**
      * Sets the value of the 'awayScore' field.
      * @param value The value of 'awayScore'.
      * @return This builder.
      */
    public MatchResult.Builder setAwayScore(int value) {
      validate(fields()[4], value);
      this.awayScore = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'awayScore' field has been set.
      * @return True if the 'awayScore' field has been set, false otherwise.
      */
    public boolean hasAwayScore() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'awayScore' field.
      * @return This builder.
      */
    public MatchResult.Builder clearAwayScore() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'tournament' field.
      * @return The value.
      */
    public java.lang.CharSequence getTournament() {
      return tournament;
    }


    /**
      * Sets the value of the 'tournament' field.
      * @param value The value of 'tournament'.
      * @return This builder.
      */
    public MatchResult.Builder setTournament(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.tournament = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'tournament' field has been set.
      * @return True if the 'tournament' field has been set, false otherwise.
      */
    public boolean hasTournament() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'tournament' field.
      * @return This builder.
      */
    public MatchResult.Builder clearTournament() {
      tournament = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public MatchResult.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.city = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public MatchResult.Builder clearCity() {
      city = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public MatchResult.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.country = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public MatchResult.Builder clearCountry() {
      country = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'neutral' field.
      * @return The value.
      */
    public boolean getNeutral() {
      return neutral;
    }


    /**
      * Sets the value of the 'neutral' field.
      * @param value The value of 'neutral'.
      * @return This builder.
      */
    public MatchResult.Builder setNeutral(boolean value) {
      validate(fields()[8], value);
      this.neutral = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'neutral' field has been set.
      * @return True if the 'neutral' field has been set, false otherwise.
      */
    public boolean hasNeutral() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'neutral' field.
      * @return This builder.
      */
    public MatchResult.Builder clearNeutral() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MatchResult build() {
      try {
        MatchResult record = new MatchResult();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.homeTeam = fieldSetFlags()[1] ? this.homeTeam : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.awayTeam = fieldSetFlags()[2] ? this.awayTeam : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.homeScore = fieldSetFlags()[3] ? this.homeScore : (java.lang.Integer) defaultValue(fields()[3]);
        record.awayScore = fieldSetFlags()[4] ? this.awayScore : (java.lang.Integer) defaultValue(fields()[4]);
        record.tournament = fieldSetFlags()[5] ? this.tournament : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.city = fieldSetFlags()[6] ? this.city : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.country = fieldSetFlags()[7] ? this.country : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.neutral = fieldSetFlags()[8] ? this.neutral : (java.lang.Boolean) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MatchResult>
    WRITER$ = (org.apache.avro.io.DatumWriter<MatchResult>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MatchResult>
    READER$ = (org.apache.avro.io.DatumReader<MatchResult>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.date);

    out.writeString(this.homeTeam);

    out.writeString(this.awayTeam);

    out.writeInt(this.homeScore);

    out.writeInt(this.awayScore);

    out.writeString(this.tournament);

    out.writeString(this.city);

    out.writeString(this.country);

    out.writeBoolean(this.neutral);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);

      this.homeTeam = in.readString(this.homeTeam instanceof Utf8 ? (Utf8)this.homeTeam : null);

      this.awayTeam = in.readString(this.awayTeam instanceof Utf8 ? (Utf8)this.awayTeam : null);

      this.homeScore = in.readInt();

      this.awayScore = in.readInt();

      this.tournament = in.readString(this.tournament instanceof Utf8 ? (Utf8)this.tournament : null);

      this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);

      this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);

      this.neutral = in.readBoolean();

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
          break;

        case 1:
          this.homeTeam = in.readString(this.homeTeam instanceof Utf8 ? (Utf8)this.homeTeam : null);
          break;

        case 2:
          this.awayTeam = in.readString(this.awayTeam instanceof Utf8 ? (Utf8)this.awayTeam : null);
          break;

        case 3:
          this.homeScore = in.readInt();
          break;

        case 4:
          this.awayScore = in.readInt();
          break;

        case 5:
          this.tournament = in.readString(this.tournament instanceof Utf8 ? (Utf8)this.tournament : null);
          break;

        case 6:
          this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          break;

        case 7:
          this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
          break;

        case 8:
          this.neutral = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










