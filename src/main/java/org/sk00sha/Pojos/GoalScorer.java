/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.sk00sha.Pojos;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GoalScorer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1901058018801048122L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GoalScorer\",\"namespace\":\"GoalScored\",\"fields\":[{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"homeTeam\",\"type\":\"string\"},{\"name\":\"awayTeam\",\"type\":\"string\"},{\"name\":\"teamScored\",\"type\":\"string\"},{\"name\":\"scorerName\",\"type\":\"string\"},{\"name\":\"minute\",\"type\":\"string\"},{\"name\":\"ownGoal\",\"type\":\"boolean\"},{\"name\":\"penalty\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GoalScorer> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GoalScorer> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GoalScorer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GoalScorer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GoalScorer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GoalScorer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GoalScorer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GoalScorer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GoalScorer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence date;
  private java.lang.CharSequence homeTeam;
  private java.lang.CharSequence awayTeam;
  private java.lang.CharSequence teamScored;
  private java.lang.CharSequence scorerName;
  private java.lang.CharSequence minute;
  private boolean ownGoal;
  private boolean penalty;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GoalScorer() {}

  /**
   * All-args constructor.
   * @param date The new value for date
   * @param homeTeam The new value for homeTeam
   * @param awayTeam The new value for awayTeam
   * @param teamScored The new value for teamScored
   * @param scorerName The new value for scorerName
   * @param minute The new value for minute
   * @param ownGoal The new value for ownGoal
   * @param penalty The new value for penalty
   */
  public GoalScorer(java.lang.CharSequence date, java.lang.CharSequence homeTeam, java.lang.CharSequence awayTeam, java.lang.CharSequence teamScored, java.lang.CharSequence scorerName, java.lang.CharSequence minute, java.lang.Boolean ownGoal, java.lang.Boolean penalty) {
    this.date = date;
    this.homeTeam = homeTeam;
    this.awayTeam = awayTeam;
    this.teamScored = teamScored;
    this.scorerName = scorerName;
    this.minute = minute;
    this.ownGoal = ownGoal;
    this.penalty = penalty;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return homeTeam;
    case 2: return awayTeam;
    case 3: return teamScored;
    case 4: return scorerName;
    case 5: return minute;
    case 6: return ownGoal;
    case 7: return penalty;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.CharSequence)value$; break;
    case 1: homeTeam = (java.lang.CharSequence)value$; break;
    case 2: awayTeam = (java.lang.CharSequence)value$; break;
    case 3: teamScored = (java.lang.CharSequence)value$; break;
    case 4: scorerName = (java.lang.CharSequence)value$; break;
    case 5: minute = (java.lang.CharSequence)value$; break;
    case 6: ownGoal = (java.lang.Boolean)value$; break;
    case 7: penalty = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'homeTeam' field.
   * @return The value of the 'homeTeam' field.
   */
  public java.lang.CharSequence getHomeTeam() {
    return homeTeam;
  }


  /**
   * Sets the value of the 'homeTeam' field.
   * @param value the value to set.
   */
  public void setHomeTeam(java.lang.CharSequence value) {
    this.homeTeam = value;
  }

  /**
   * Gets the value of the 'awayTeam' field.
   * @return The value of the 'awayTeam' field.
   */
  public java.lang.CharSequence getAwayTeam() {
    return awayTeam;
  }


  /**
   * Sets the value of the 'awayTeam' field.
   * @param value the value to set.
   */
  public void setAwayTeam(java.lang.CharSequence value) {
    this.awayTeam = value;
  }

  /**
   * Gets the value of the 'teamScored' field.
   * @return The value of the 'teamScored' field.
   */
  public java.lang.CharSequence getTeamScored() {
    return teamScored;
  }


  /**
   * Sets the value of the 'teamScored' field.
   * @param value the value to set.
   */
  public void setTeamScored(java.lang.CharSequence value) {
    this.teamScored = value;
  }

  /**
   * Gets the value of the 'scorerName' field.
   * @return The value of the 'scorerName' field.
   */
  public java.lang.CharSequence getScorerName() {
    return scorerName;
  }


  /**
   * Sets the value of the 'scorerName' field.
   * @param value the value to set.
   */
  public void setScorerName(java.lang.CharSequence value) {
    this.scorerName = value;
  }

  /**
   * Gets the value of the 'minute' field.
   * @return The value of the 'minute' field.
   */
  public java.lang.CharSequence getMinute() {
    return minute;
  }


  /**
   * Sets the value of the 'minute' field.
   * @param value the value to set.
   */
  public void setMinute(java.lang.CharSequence value) {
    this.minute = value;
  }

  /**
   * Gets the value of the 'ownGoal' field.
   * @return The value of the 'ownGoal' field.
   */
  public boolean getOwnGoal() {
    return ownGoal;
  }


  /**
   * Sets the value of the 'ownGoal' field.
   * @param value the value to set.
   */
  public void setOwnGoal(boolean value) {
    this.ownGoal = value;
  }

  /**
   * Gets the value of the 'penalty' field.
   * @return The value of the 'penalty' field.
   */
  public boolean getPenalty() {
    return penalty;
  }


  /**
   * Sets the value of the 'penalty' field.
   * @param value the value to set.
   */
  public void setPenalty(boolean value) {
    this.penalty = value;
  }

  /**
   * Creates a new GoalScorer RecordBuilder.
   * @return A new GoalScorer RecordBuilder
   */
  public static GoalScorer.Builder newBuilder() {
    return new GoalScorer.Builder();
  }

  /**
   * Creates a new GoalScorer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GoalScorer RecordBuilder
   */
  public static GoalScorer.Builder newBuilder(GoalScorer.Builder other) {
    if (other == null) {
      return new GoalScorer.Builder();
    } else {
      return new GoalScorer.Builder(other);
    }
  }

  /**
   * Creates a new GoalScorer RecordBuilder by copying an existing GoalScorer instance.
   * @param other The existing instance to copy.
   * @return A new GoalScorer RecordBuilder
   */
  public static GoalScorer.Builder newBuilder(GoalScorer other) {
    if (other == null) {
      return new GoalScorer.Builder();
    } else {
      return new GoalScorer.Builder(other);
    }
  }

  /**
   * RecordBuilder for GoalScorer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GoalScorer>
    implements org.apache.avro.data.RecordBuilder<GoalScorer> {

    private java.lang.CharSequence date;
    private java.lang.CharSequence homeTeam;
    private java.lang.CharSequence awayTeam;
    private java.lang.CharSequence teamScored;
    private java.lang.CharSequence scorerName;
    private java.lang.CharSequence minute;
    private boolean ownGoal;
    private boolean penalty;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(GoalScorer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.homeTeam)) {
        this.homeTeam = data().deepCopy(fields()[1].schema(), other.homeTeam);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.awayTeam)) {
        this.awayTeam = data().deepCopy(fields()[2].schema(), other.awayTeam);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.teamScored)) {
        this.teamScored = data().deepCopy(fields()[3].schema(), other.teamScored);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.scorerName)) {
        this.scorerName = data().deepCopy(fields()[4].schema(), other.scorerName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.minute)) {
        this.minute = data().deepCopy(fields()[5].schema(), other.minute);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.ownGoal)) {
        this.ownGoal = data().deepCopy(fields()[6].schema(), other.ownGoal);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.penalty)) {
        this.penalty = data().deepCopy(fields()[7].schema(), other.penalty);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing GoalScorer instance
     * @param other The existing instance to copy.
     */
    private Builder(GoalScorer other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.homeTeam)) {
        this.homeTeam = data().deepCopy(fields()[1].schema(), other.homeTeam);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.awayTeam)) {
        this.awayTeam = data().deepCopy(fields()[2].schema(), other.awayTeam);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.teamScored)) {
        this.teamScored = data().deepCopy(fields()[3].schema(), other.teamScored);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.scorerName)) {
        this.scorerName = data().deepCopy(fields()[4].schema(), other.scorerName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.minute)) {
        this.minute = data().deepCopy(fields()[5].schema(), other.minute);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ownGoal)) {
        this.ownGoal = data().deepCopy(fields()[6].schema(), other.ownGoal);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.penalty)) {
        this.penalty = data().deepCopy(fields()[7].schema(), other.penalty);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public GoalScorer.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public GoalScorer.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'homeTeam' field.
      * @return The value.
      */
    public java.lang.CharSequence getHomeTeam() {
      return homeTeam;
    }


    /**
      * Sets the value of the 'homeTeam' field.
      * @param value The value of 'homeTeam'.
      * @return This builder.
      */
    public GoalScorer.Builder setHomeTeam(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.homeTeam = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'homeTeam' field has been set.
      * @return True if the 'homeTeam' field has been set, false otherwise.
      */
    public boolean hasHomeTeam() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'homeTeam' field.
      * @return This builder.
      */
    public GoalScorer.Builder clearHomeTeam() {
      homeTeam = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'awayTeam' field.
      * @return The value.
      */
    public java.lang.CharSequence getAwayTeam() {
      return awayTeam;
    }


    /**
      * Sets the value of the 'awayTeam' field.
      * @param value The value of 'awayTeam'.
      * @return This builder.
      */
    public GoalScorer.Builder setAwayTeam(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.awayTeam = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'awayTeam' field has been set.
      * @return True if the 'awayTeam' field has been set, false otherwise.
      */
    public boolean hasAwayTeam() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'awayTeam' field.
      * @return This builder.
      */
    public GoalScorer.Builder clearAwayTeam() {
      awayTeam = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'teamScored' field.
      * @return The value.
      */
    public java.lang.CharSequence getTeamScored() {
      return teamScored;
    }


    /**
      * Sets the value of the 'teamScored' field.
      * @param value The value of 'teamScored'.
      * @return This builder.
      */
    public GoalScorer.Builder setTeamScored(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.teamScored = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'teamScored' field has been set.
      * @return True if the 'teamScored' field has been set, false otherwise.
      */
    public boolean hasTeamScored() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'teamScored' field.
      * @return This builder.
      */
    public GoalScorer.Builder clearTeamScored() {
      teamScored = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'scorerName' field.
      * @return The value.
      */
    public java.lang.CharSequence getScorerName() {
      return scorerName;
    }


    /**
      * Sets the value of the 'scorerName' field.
      * @param value The value of 'scorerName'.
      * @return This builder.
      */
    public GoalScorer.Builder setScorerName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.scorerName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'scorerName' field has been set.
      * @return True if the 'scorerName' field has been set, false otherwise.
      */
    public boolean hasScorerName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'scorerName' field.
      * @return This builder.
      */
    public GoalScorer.Builder clearScorerName() {
      scorerName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'minute' field.
      * @return The value.
      */
    public java.lang.CharSequence getMinute() {
      return minute;
    }


    /**
      * Sets the value of the 'minute' field.
      * @param value The value of 'minute'.
      * @return This builder.
      */
    public GoalScorer.Builder setMinute(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.minute = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'minute' field has been set.
      * @return True if the 'minute' field has been set, false otherwise.
      */
    public boolean hasMinute() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'minute' field.
      * @return This builder.
      */
    public GoalScorer.Builder clearMinute() {
      minute = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ownGoal' field.
      * @return The value.
      */
    public boolean getOwnGoal() {
      return ownGoal;
    }


    /**
      * Sets the value of the 'ownGoal' field.
      * @param value The value of 'ownGoal'.
      * @return This builder.
      */
    public GoalScorer.Builder setOwnGoal(boolean value) {
      validate(fields()[6], value);
      this.ownGoal = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ownGoal' field has been set.
      * @return True if the 'ownGoal' field has been set, false otherwise.
      */
    public boolean hasOwnGoal() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'ownGoal' field.
      * @return This builder.
      */
    public GoalScorer.Builder clearOwnGoal() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'penalty' field.
      * @return The value.
      */
    public boolean getPenalty() {
      return penalty;
    }


    /**
      * Sets the value of the 'penalty' field.
      * @param value The value of 'penalty'.
      * @return This builder.
      */
    public GoalScorer.Builder setPenalty(boolean value) {
      validate(fields()[7], value);
      this.penalty = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'penalty' field has been set.
      * @return True if the 'penalty' field has been set, false otherwise.
      */
    public boolean hasPenalty() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'penalty' field.
      * @return This builder.
      */
    public GoalScorer.Builder clearPenalty() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GoalScorer build() {
      try {
        GoalScorer record = new GoalScorer();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.homeTeam = fieldSetFlags()[1] ? this.homeTeam : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.awayTeam = fieldSetFlags()[2] ? this.awayTeam : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.teamScored = fieldSetFlags()[3] ? this.teamScored : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.scorerName = fieldSetFlags()[4] ? this.scorerName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.minute = fieldSetFlags()[5] ? this.minute : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.ownGoal = fieldSetFlags()[6] ? this.ownGoal : (java.lang.Boolean) defaultValue(fields()[6]);
        record.penalty = fieldSetFlags()[7] ? this.penalty : (java.lang.Boolean) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GoalScorer>
    WRITER$ = (org.apache.avro.io.DatumWriter<GoalScorer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GoalScorer>
    READER$ = (org.apache.avro.io.DatumReader<GoalScorer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.date);

    out.writeString(this.homeTeam);

    out.writeString(this.awayTeam);

    out.writeString(this.teamScored);

    out.writeString(this.scorerName);

    out.writeString(this.minute);

    out.writeBoolean(this.ownGoal);

    out.writeBoolean(this.penalty);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);

      this.homeTeam = in.readString(this.homeTeam instanceof Utf8 ? (Utf8)this.homeTeam : null);

      this.awayTeam = in.readString(this.awayTeam instanceof Utf8 ? (Utf8)this.awayTeam : null);

      this.teamScored = in.readString(this.teamScored instanceof Utf8 ? (Utf8)this.teamScored : null);

      this.scorerName = in.readString(this.scorerName instanceof Utf8 ? (Utf8)this.scorerName : null);

      this.minute = in.readString(this.minute instanceof Utf8 ? (Utf8)this.minute : null);

      this.ownGoal = in.readBoolean();

      this.penalty = in.readBoolean();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
          break;

        case 1:
          this.homeTeam = in.readString(this.homeTeam instanceof Utf8 ? (Utf8)this.homeTeam : null);
          break;

        case 2:
          this.awayTeam = in.readString(this.awayTeam instanceof Utf8 ? (Utf8)this.awayTeam : null);
          break;

        case 3:
          this.teamScored = in.readString(this.teamScored instanceof Utf8 ? (Utf8)this.teamScored : null);
          break;

        case 4:
          this.scorerName = in.readString(this.scorerName instanceof Utf8 ? (Utf8)this.scorerName : null);
          break;

        case 5:
          this.minute = in.readString(this.minute instanceof Utf8 ? (Utf8)this.minute : null);
          break;

        case 6:
          this.ownGoal = in.readBoolean();
          break;

        case 7:
          this.penalty = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










